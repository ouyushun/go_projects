syntax = "v1"

//goctl api go -api demo.api -dir=. -style gozero
type (
	// 定义登录接口的 json 请求体
	LoginReq {
		Username string `json:"username"`
		Password string `json:"password"`
	}
	// 定义登录接口的 json 响应体
	LoginResp {
		Id       int64  `json:"id"`
		Name     string `json:"name"`
		Token    string `json:"token"`
		ExpireAt string `json:"expireAt"`
	}
)

type (
	// 定义获取用户信息的 json 请求体
	GetUserInfoReq {
		Id int64 `json:"id"`
	}
	// 定义获取用户信息的 json 响应体
	GetUserInfoResp {
		Id   int64  `json:"id"`
		Name string `json:"name"`
		Desc string `json:"desc"`
	}
	// 定义更新用户信息的 json 请求体
	UpdateUserInfoReq {
		Id   int64  `json:"id"`
		Name string `json:"name"`
		Desc string `json:"desc"`
	}
)

// 定义 HTTP 服务
// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：
// 1. 路由分组
// 2. 中间件声明
// 3. 路由前缀
// 4. 超时配置
// 5. jwt 鉴权开关
// 所有声明仅对当前 service 中的路由有效
@server (
	// 代表当前 service 代码块下的路由生成代码时都会被放到 login 目录下
	group: login
	// 定义路由前缀为 "/v1"
	prefix: /v1
)
// 微服务名称为 user，生成的代码目录和配置文件将和 user 值相关
service user {
	// 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler
	@handler login
	// 定义接口
	// 请求方法为 post
	// 路由为 /user/login
	// 请求体为 LoginReq
	// 响应体为 LoginResp，响应体必须有 returns 关键字修饰
	post /user/login (LoginReq) returns (LoginResp)

	@handler test
	get /user/test returns (LoginReq)
}

// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：
// 1. 路由分组
// 2. 中间件声明
// 3. 路由前缀
// 4. 超时配置
// 5. jwt 鉴权开关
// 所有声明仅对当前 service 中的路由有效
@server (
	// 代表当前 service 代码块下的所有路由均需要 jwt 鉴权
	// goctl 生成代码时会将当前 service 代码块下的接口
	// 信息添加上 jwt 相关代码，Auth 值为 jwt 密钥，过期
	// 等信息配置的 golang 结构体名称
	//jwt: Auth
	// 代表当前 service 代码块下的路由生成代码时都会被放到 user 目录下
	group: user
	// 定义路由前缀为 "/v1"
	prefix: /v1
)
// 注意，定义多个 service 代码块时，服务名称必须一致，因此这里的服务名称必须
// 和上文的 service 名称一样，为 user 服务。
service user {
	// 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler
	@handler getUserInfo
	// 定义接口
	// 请求方法为 post
	// 路由为 /user/info
	// 请求体为 GetUserInfoReq
	// 响应体为 GetUserInfoResp，响应体必须有 returns 关键字修饰
	post /user/info (GetUserInfoReq) returns (GetUserInfoResp)

	// 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler
	@handler updateUserInfo
	// 定义接口
	// 请求方法为 post
	// 路由为 /user/info/update
	// 请求体为 UpdateUserInfoReq
	// 由于不需要响应体，因此可以忽略不写
	post /user/info/update (UpdateUserInfoReq)

	// 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler
	@handler delUser
	// 定义接口
	// 请求方法为 post
	// 路由为 /user/info/update
	// 请求体为 UpdateUserInfoReq
	// 由于不需要响应体，因此可以忽略不写
	post /user/info/del (UpdateUserInfoReq)
}

